clear all
close all

%% Set working directory
workingdir = ...
    '/Users/arnavsheth/Documents/Research/AdamDuncan/Matlab/Data/';

load prices_all_ts.mat
% load prices_equities_open_ts.mat
load prices_equities_ts.mat

year = datevec(prices_all_ts.dates(1));

year(1)

%% Specify start- and end-hour here

%Specify start and end hours in 24-hour format 
%(e.g., 5 for 5am, 17 for 5pm)
starthour = 10
startminute = 00

endhour = 11
endminute = 00

fixhour = 11+(00/60);

starthr = starthour+(startminute/60);
endhr = endhour+(endminute/60);


%Extract start and end dates for equities extraction
datebounds = ftsbound(prices_all_ts,2);

%% Start data extraction for FX

%Extracting the end-hour and start-hour price for each day in the year

%Doing it for the end-hour first
%If the end-hour is 11am, this is our proxy for the 11am WM Fix
dv = cellstr(datestr(endhr/24:1/60/24:endhr/24));
prices_endhour_ts = fetch(prices_all_ts, datebounds(1,:), [], ...
    datebounds(2,:), [], 1, 'd',dv);

%Doing it for the start-hour
dv = cellstr(datestr(starthr/24:1/60/24:starthr/24));
prices_starthour_ts = fetch(prices_all_ts, datebounds(1,:), [], ...
    datebounds(2,:), [], 1, 'd',dv);

%Doing it for the fix
dv = cellstr(datestr(fixhour/24:1/60/24:fixhour/24));
prices_11amfix_ts = fetch(prices_all_ts, datebounds(1,:), [], ...
    datebounds(2,:), [], 1, 'd',dv);

%Extract start and end dates
datebounds = ftsbound(prices_all_ts,2);

%Get the OHLC cell array from FX data
fx_names = fieldnames(prices_all_ts,1);

% prices_endhour_ts = fetch(prices_all_ts, datebounds(1,:), [], ...
%     datebounds(2,:), [], 1, 'd',{'11:00'});

%% Data extraction for Equities

%get the equity index names
names_equities = fieldnames(prices_equities_ts,1);

%get the series of the equities datenums
datenums_equities_prices = getfield(prices_equities_ts,'dates');
datevec_equities_prices = datevec(datenums_equities_prices);

%%Now extracting from the end-hour prices only the days for which the datenums 
%%series is the smallest
prices_endhour_ts = prices_endhour_ts(datestr(datenums_equities_prices));

%Adding a timestamp to the equities time series because Matlab does not
%behave well without that timestamp...

%convert to non-FTS object
prices_equities = fts2mat(prices_equities_ts);


%%%%%%%%%%%%%%%%%%
%%Take logs of prices here
%%%%%%%%%%%%%%%%%%
prices_equities_log = log(prices_equities);


%create the timestamp
time = [endhour endminute 00];
equitiestime_prices = repmat(time, size(prices_equities_log,1), 1);

%add the timestamp
prices_equities_log = [datevec_equities_prices(:,1:3) equitiestime_prices ... 
    prices_equities_log];

%reconvert to time series object
prices_equities_log_ts = fints(datenum(prices_equities_log(:,1:6)),...
    prices_equities_log(:,7:size(prices_equities_log,2)), names_equities);

%clearing vars for mem reasons
clear datevec_equities prices_equities_close...
    prices_equities_open prices_equities_diff 

%Create vector of times and extract all prices from
    %starthour to starthour + 59mins daily
    dv = cellstr(datestr(starthr/24:1/60/24:endhr/24-1/60/24));
    prices_hourly_ts = fetch(prices_all_ts, datebounds(1,:), [], ...
        datebounds(2,:), [], 1, 'd',dv);

    %% Calculating the TWAP between start-hour and end-hour

    %%FIRST: Convert to non-FTS object to be able to use the 
    %accumarray() function
    prices_hourly = fts2mat(prices_hourly_ts,1);
    

    %%SECOND: Get a matrix of datevectors in the form [y, m, d, h, m, s] to use
    %%to use the unique() function and get a unique date for each time period.
    %%In other words, there will be a unique value for each set of values
    %%from 10:00 to 10:59am, 9:00 to 9:59am, and so on...
    dates_hourly = datevec(prices_hourly(:,1));

    %Now get the unique dates using the unique() function so that we can 
    %eventually get the TWAP for each of those dates
    [uniquedates_hourly, ~, subs_hourly]    = ...
        unique(dates_hourly(:,1:3),'rows');

    
    %%THIRD: Calculate the TWAP for each date using the accumarray() function
    %Doing it by column (open, high, low close) 
    prices_TWAP_open = [uniquedates_hourly accumarray(subs_hourly, ...
        prices_hourly(:,2), [], @mean)];
    prices_TWAP_high = [uniquedates_hourly accumarray(subs_hourly, ...
        prices_hourly(:,3), [], @mean)];
    prices_TWAP_low = [uniquedates_hourly accumarray(subs_hourly, ...
        prices_hourly(:,4), [], @mean)];
    prices_TWAP_close = [uniquedates_hourly accumarray(subs_hourly, ....
        prices_hourly(:,5), [], @mean)];

    
    %%FOURTH: We have to add a time column as we have an average per date
    %We are doing this because once we convert it back to a FTS object we will
    %need an identifier for each time
    TWAPtime = repmat(time, size(prices_TWAP_open,1), 1);
    prices_TWAP = [prices_TWAP_open(:,1:3) TWAPtime prices_TWAP_open(:,4)...
        prices_TWAP_high(:,4) prices_TWAP_low(:,4) prices_TWAP_close(:,4)];

    
    %clearing up variables for mem reasons
    clear prices_all time prices_TWAP_open prices_TWAP_high...
        prices_TWAP_low prices_TWAP_close subs_hourly dv dates_hourly TWAPtime

    
    %%FIFTH: Merge all data series based on dates where necessary

    %Create a vector of datenums for the start- and end-hour prices
    datenums_endhour = getfield(prices_endhour_ts,'dates');
    datenums_starthour = getfield(prices_starthour_ts,'dates');
    datenums_11amfix = getfield(prices_11amfix_ts,'dates');
    
    %Create a vector of datenums for the TWAP prices
    datenums_TWAP = datenum(prices_TWAP(:,1:3));
    
    %Merge all the datenums
    datenums_fx = intersect(datenums_11amfix, datenums_TWAP, 'rows');    

    %Converting the hourly TWAPs to FTS object
    prices_TWAP_ts = fints(datenum(prices_TWAP(:,1:6)), ...
        prices_TWAP(:,7:10),fx_names);

